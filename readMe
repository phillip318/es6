var 和 let的区别
        1 var 可以重复声明 ， let不能
        2 var作用域是function     let作用域是代码块{}
        3　提前使用之后声明的 var变量 值为undifined    ，let会报错(暂时性死区)
        4 for循环中i会溢出成全局变量，i=10   let不会，因为let声明的是局部变量

let 和 const 的区别
        1  暂时性死区， 作用域都相同，  只是const声明的变量不允许被改变， 而且声明时必须赋值
        2




上面代码中，顶层对象的属性赋值与全局变量的赋值，是同一件事。

顶层对象的属性与全局变量挂钩，被认为是 JavaScript 语言最大的设计败笔之一。
这样的设计带来了几个很大的问题，首先是没法在编译时就报出变量未声明的错误，只有运行时才能知道
（因为全局变量可能是顶层对象的属性创造的，而属性的创造是动态的）；其次，程序员很容易不知不觉地就创建了全局变量（比如打字出错）；
最后，顶层对象的属性是到处可以读写的，这非常不利于模块化编程。另一方面，window对象有实体含义，指的是浏览器的窗口对象，
顶层对象是一个有实体含义的对象，也是不合适的。

ES6 为了改变这一点，一方面规定，为了保持兼容性，var命令和function命令声明的全局变量，依旧是顶层对象的属性；
另一方面规定，let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。
也就是说，从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩